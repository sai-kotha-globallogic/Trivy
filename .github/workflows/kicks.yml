name: KICS Security Scan (Severity Mapped)

on: 
  push:
  pull_request:

jobs:
  kics_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run KICS (JSON output)
        uses: checkmarx/kics-github-action@v2.1.13
        with:
          path: .
          output_path: myResults
          output_formats: 'json'
          ignore_on_exit: results

      - name: Inspect myResults permissions
        run: |
          echo "Directory listing:"
            ls -ld myResults || true
            ls -l myResults || true

      - name: (Optional) Fix permissions if needed
        run: |
          if [ -d myResults ]; then
            sudo chown -R $USER:$USER myResults || true
            chmod -R u+w myResults || true
          fi

      - name: Show snippet of raw KICS JSON
        run: |
          if [ -f myResults/results.json ]; then
            head -n 120 myResults/results.json
          else
            echo "results.json not found"; exit 1
          fi

      - name: Write severity mapping script
        run: |
          mkdir -p scripts
          cat > scripts/kics_json_to_sarif.py <<'PYEOF'
#!/usr/bin/env python3
import json, os, sys, hashlib
SEVERITY_MAPPING = {
  "CRITICAL": ("error","10.0"),
  "HIGH": ("error","8.9"),
  "MEDIUM": ("warning","6.9"),
  "LOW": ("note","3.9"),
  "INFO": ("note","0.0"),
  "UNKNOWN": ("note","0.0"),
}
def norm(p): return p.lstrip("./").replace("\\","/")
def main(src_json, out_sarif):
    with open(src_json,"r",encoding="utf-8") as f: data=json.load(f)
    queries=data.get("queries",[])
    rules=[]; rule_idx={}; results=[]
    for q in queries:
        qid=q.get("query_id") or hashlib.sha256((q.get("query_name") or "").encode()).hexdigest()[:16]
        sev=(q.get("severity") or "UNKNOWN").upper()
        level,secsev=SEVERITY_MAPPING.get(sev, SEVERITY_MAPPING["UNKNOWN"])
        desc=q.get("description") or ""
        if qid not in rule_idx:
            rule_idx[qid]=len(rules)
            rules.append({
              "id": qid,
              "name": q.get("query_name"),
              "shortDescription":{"text": q.get("query_name","")},
              "fullDescription":{"text": desc},
              "help":{"text": desc, "markdown": f"**Description:** {desc}"},
              "defaultConfiguration":{"level": level},
              "properties":{
                "problem.severity": sev,
                "security-severity": secsev,
                "tags": list(filter(None, ["kics", q.get("platform",""), q.get("category",""), sev]))
              }
            })
        for occ in q.get("files",[]):
            fname=norm(occ.get("file_name","UNKNOWN"))
            line=occ.get("line") or 1
            if not isinstance(line,int) or line < 1: line=1
            msg=f"{q.get('query_name')} - {desc or 'No description'}"
            results.append({
              "ruleId": qid,
              "ruleIndex": rule_idx[qid],
              "level": level,
              "message":{"text": msg},
              "locations":[{
                "physicalLocation":{
                  "artifactLocation":{"uri": fname},
                  "region":{"startLine": line}
                }
              }],
              "properties":{
                "kics_severity": sev,
                "security-severity": secsev,
                "category": q.get("category",""),
                "platform": q.get("platform",""),
                "cwe": q.get("cwe","")
              }
            })
    sarif={
      "version":"2.1.0",
      "$schema":"https://json.schemastore.org/sarif-2.1.0.json",
      "runs":[{
        "tool":{"driver":{"name":"KICS (custom severity mapped)","informationUri":"https://github.com/Checkmarx/kics","rules":rules}},
        "results":results
      }]
    }
    os.makedirs(os.path.dirname(out_sarif), exist_ok=True)
    with open(out_sarif,"w",encoding="utf-8") as f: json.dump(sarif,f,indent=2)
    print(f"Custom SARIF written: {out_sarif} (rules={len(rules)} results={len(results)})")
if __name__=="__main__":
    if len(sys.argv)<3:
        print("Usage: script <results.json> <out.sarif>"); sys.exit(1)
    main(sys.argv[1], sys.argv[2])
PYEOF
          chmod +x scripts/kics_json_to_sarif.py

      - name: Generate severity-mapped SARIF
        run: |
          mkdir -p custom-sarif
          python3 scripts/kics_json_to_sarif.py myResults/results.json custom-sarif/results-with-severity.sarif
          head -n 60 custom-sarif/results-with-severity.sarif || true

      - name: Upload severity-mapped SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: custom-sarif/results-with-severity.sarif

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kics-severity-artifacts
          path: |
            myResults/results.json
            custom-sarif/results-with-severity.sarif
